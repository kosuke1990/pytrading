/// <reference types="ws" />
import { Socket } from "./Socket";
import { Response, Error as RPCError, ErrorResponse } from "./common";
import { Data } from "isomorphic-ws";
import EventEmitter = require("eventemitter3");
export declare const enum VERSION_CHECK_MODE {
    STRICT = 0,
    LOOSE = 1,
    IGNORE = 2
}
export interface Options {
    /**
     * `STRICT`: only accepts jsonrpc: `2.0`.
     * `LOOSE`: accepts jsonrpc: `2.0` but it's omittable.
     * `IGNORE`: ignore jsonrpc property.
     */
    jsonrpcVersionCheck?: VERSION_CHECK_MODE;
    /**
     * response handler
     */
    onResponse?: (response: Response) => void;
}
declare type MethodFunction<SOC extends Socket = Socket> = (socket: SOC, params: any) => Promise<any> | any;
export declare type MethodMap<SOC extends Socket = Socket> = Map<string, MethodFunction<SOC>>;
export default interface MessageHandler<SOC extends Socket = Socket> {
    on(event: "response", handler: (socket: SOC, response: Response) => void): this;
    on(event: "method_response", handler: (socket: SOC, response: Response) => void): this;
    on(event: "error_response", handler: (socket: SOC, response: ErrorResponse) => void): this;
    on(event: "notification_error", handler: (socket: SOC, error: RPCError) => void): this;
}
export default class MessageHandler<SOC extends Socket = Socket> extends EventEmitter {
    readonly options: Options;
    methods: MethodMap<SOC>;
    constructor(options: Options);
    handleMessage(socket: SOC, data: Data): Promise<void>;
    private _processCall;
}
export {};
